include:
  - project: 'hakka-405/docker-gpu-hakka-speech-gitlab-ci'
    ref: master
    file: '/templates/chatops.yml'
  - project: 'csie-406/doc-gitlab-406'
    ref: master
    file: 'templates/share/sonarqube.yml'

#variables:
#  GIT_STRATEGY: clone

stages:
  - build
  - production
  - chatops
  - test

hakka_service_image:
  stage: build
  tags:
    - shell
    - nvidia-docker
    - skynet
  script:
    - echo 'CI_REGISTRY_IMAGE:' + $CI_REGISTRY_IMAGE
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
    - docker build -t $CI_REGISTRY_IMAGE/hakka-service .
    - docker push $CI_REGISTRY_IMAGE/hakka-service

deploy_service:
  stage: production
  tags:
    - shell
    - nvidia-docker
    - skynet
  needs: ["hakka_service_image"]
  script:
    - ls 
    - docker-compose up -d
    - docker-compose ps
    - docker-compose logs
    #- docker run my-docker-image /script/to/run/tests

# 取得指定模型服務狀況
# XXX run 取得模型log alpha1
取得模型log:
  stage: chatops
  only: [chat]
  tags:
    - shell
    - nvidia-docker
    - skynet
  script:
    - echo get service model-$CHAT_INPUT logs
    - docker-compose logs model-$CHAT_INPUT --tail="50"

取得服務模型清單:
  stage: chatops
  only: [chat]
  tags:
    - shell
    - nvidia-docker
    - skynet
  script:
    - docker-compose ps

#
範例回傳:
  stage: chatops
  only: [chat]
  tags:
    - shell
    - nvidia-docker
    - skynet
  script:
    - echo 'user input chat arg:'$CHAT_INPUT

#sonarqube_scan_project:
#  stage: scan
#  # 允許在資安掃描時失敗
#  allow_failure: true
#  script:
#    - echo "Prepare Sonarqube Scan - Server ${SONAR_HOST_URL}" 
#    - docker run --rm -e SONAR_HOST_URL=${SONAR_HOST_URL} 
#      -v "${PWD}:/usr/src" --user="$(id -u):$(id -g)" 
#      sonarsource/sonar-scanner-cli -Dsonar.qualitygate.wait=true -Dsonar.projectKey=${CI_PROJECT_NAME}-${CI_PROJECT_ID} -Dsonar.#projectName=${CI_PROJECT_PATH_SLUG} -Dsonar.projectVersion=${CI_COMMIT_SHORT_SHA}
